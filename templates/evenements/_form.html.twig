{#    {{ form_start(form) }}
    {{ form_widget(form) }}
    <button class="btn">{{ button_label|default('Save') }}</button>
{{ form_end(form) }}

#}

 {# {{ form_start(form) }}

    {{ form_row(form.nom) }}
    {{ form_errors(form.nom) }}

    {{ form_row(form.datedebut) }}
    {{ form_errors(form.datedebut) }}

    {{ form_row(form.datefin) }}
    {{ form_errors(form.datefin) }}

    {{ form_row(form.lieu) }}
    {{ form_errors(form.lieu) }}

    {{ form_row(form.type) }}
    {{ form_errors(form.type) }}

    {{ form_row(form.description) }}
    {{ form_errors(form.description) }}

    {{ form_row(form.nombreplaces) }}
    {{ form_errors(form.nombreplaces) }}

    {{ form_row(form.nombreparticipants) }}
    {{ form_errors(form.nombreparticipants) }}

    {{ form_row(form.posterurl) }}
    {{ form_errors(form.posterurl) }}

    {{ form_row(form.videourl) }}
    {{ form_errors(form.videourl) }}


    <button class="btn">{{ button_label|default('Save') }}</button>
{{ form_end(form) }}
#}




{{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

<div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.nom) }}</label>
    <div class="col-md-2">
        {{ form_widget(form.nom, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.nom) }}
    </div>
</div>


  <div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.datedebut) }}</label>
    <div class="col-md-4">
       {{ form_widget(form.datedebut, {'attr': {'class': 'form-control js-datepicker'}}) }}
        {{ form_errors(form.datedebut) }}
    </div>
    </div>

    <div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.datefin) }}</label>
    <div class="col-md-4">
        {{ form_widget(form.datefin) }}
        {{ form_errors(form.datefin) }}
    </div>
</div>





<div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.lieu) }}</label>
    <div class="col-md-2">
        {{ form_widget(form.lieu, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.lieu) }}
    </div>
</div>

<div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.type) }}</label>
    <div class="col-md-2">
        {{ form_widget(form.type, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.type) }}
    </div>
</div>

<div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.description) }}</label>
    <div class="col-md-2">
        {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.description) }}
    </div>
</div>

<div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.nombreplaces) }}</label>
    <div class="col-md-2">
        {{ form_widget(form.nombreplaces, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.nombreplaces) }}
    </div>
</div>

{# 
<div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.nombreparticipants) }}</label>
    <div class="col-md-2">
        {{ form_widget(form.nombreparticipants, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.nombreparticipants) }}
    </div>
</div> 
#}
{# Manual hidden inputs for posterurl and videourl #}
{#<input type="hidden" id="posterurl_input" name="{{ form.vars.full_name }}[posterurl]">
<input type="hidden" id="videourl_input" name="{{ form.vars.full_name }}[videourl]">

<div class="form-group row">
    <label class="col-md-2 col-form-label">Poster URL</label>
    <div class="col-md-2">
        <!-- Invisible File Input for Poster Image -->
        <input type="file" id="posterFileInput" style="display:none" onchange="handlePosterUpload(event)"/>
        <button type="button" class="btn btn-secondary" onclick="document.getElementById('posterFileInput').click();">Upload Image</button>
    </div>
</div>

<div class="form-group row">
    <label class="col-md-2 col-form-label">Video URL</label>
    <div class="col-md-2">
        <!-- Invisible File Input for Video -->
        <input type="file" id="videoFileInput" style="display:none" onchange="handleVideoUpload(event)"/>
        <button type="button" class="btn btn-secondary" onclick="document.getElementById('videoFileInput').click();">Upload Video</button>
    </div>
</div> #}


 <div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.posterurl) }}</label>
    <div class="col-md-2">
        {{ form_widget(form.posterurl, {'attr': {'id': 'posterurl_input'}}) }}
        
        <!-- Invisible File Input for Poster Image -->
        <input type="file" id="posterFileInput" style="display:none" onchange="handlePosterUpload(event)"/>
        <button type="button" class="btn btn-secondary" onclick="document.getElementById('posterFileInput').click();">Upload Image</button>

        {{ form_errors(form.posterurl) }}
    </div>

</div>

<div class="form-group row">
    <label class="col-md-2 col-form-label">{{ form_label(form.videourl) }}</label>
    <div class="col-md-2">
       {{ form_widget(form.videourl, {'attr': {'id': 'videourl_input'}}) }}

        <!-- Invisible File Input for Video -->
        <input type="file" id="videoFileInput" style="display:none" onchange="handleVideoUpload(event)"/>
        <button type="button" class="btn btn-secondary" onclick="document.getElementById('videoFileInput').click();">Upload Video</button>

        {{ form_errors(form.videourl) }}
    </div>
</div> 


<button class="btn btn-primary"style="margin-left: 30px;">{{ button_label|default('Save') }}</button>

<script>
let posterUploadComplete = false;
let videoUploadComplete = false;
function handlePosterUpload(event) {
    const file = event.target.files[0];
    if (!file) {
        return;
    }

    const formData = new FormData();
    formData.append('posterFile', file); // The 'posterFile' key needs to match what your Symfony controller expects

    fetch('/evenements/upload/poster', {
        method: 'POST',
        body: formData,
        // Add any necessary headers here. For example, headers to handle CSRF protection if needed.
    })
    .then(response => response.json())
    .then(data => {
        if(data.filePath && typeof data.filePath === 'string') {
            document.getElementById('posterurl_input').value = data.filePath;
            console.log("Poster URL updated to: ", data.filePath);
            posterUploadComplete = true; // Mark poster upload as complete
        } else {
            console.error("Invalid filePath returned from server");
        }
    })
    .catch(error => console.error('Error:', error));
    

}
</script>
<script>
function handleVideoUpload(event) {
    const file = event.target.files[0];
    if (!file) {
        return;
    }

    const formData = new FormData();
    formData.append('videoFile', file); // The 'videoFile' key needs to match what your Symfony controller expects

    fetch('/evenements/upload/video', {
        method: 'POST',
        body: formData,
        // Add any necessary headers here. For example, headers to handle CSRF protection if needed.
    })
    .then(response => response.json())
    .then(data => {
        if(data.filePath && typeof data.filePath === 'string') {
            document.getElementById('videourl_input').value = data.filePath;
            console.log("Video URL updated to: ", data.filePath);
            videoUploadComplete = true; // Mark video upload as complete
        } else {
            console.error("Invalid filePath returned from server");
        }
    })
    .catch(error => console.error('Error:', error));
    

}
</script>

{{ form_end(form) }}
