{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/puzzle.css') }}">
    <style>
        .btn-primary {
            background-color: #007bff; /* Bootstrap primary color */
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            border: none;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #0056b3; /* Darker shade for hover effect */
            color: white;
        }

        #progressBarContainer {
            width: 100%;
            background-color: #ddd;
        }

        #progressBar {
            height: 20px;
            background-color: #4CAF50;
            text-align: center;
            line-height: 20px;
            color: white;
            width: 0%;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="puzzle-container">
        <img id="title" src="{{ asset('images/logo-1-1.png') }}" alt="Title Image" style="width: 250px; height: auto;">
        <div id="board"></div>
        <h1>Turns: <span id="turns">0</span></h1>
        <div id="progressBarContainer">
            <div id="progressBar">0%</div>
        </div>
        <h2>Time Remaining: <span id="time">02:00</span></h2>
        <a href="{{ path('activite_gallery') }}" class="btn btn-primary" id="back-to-activities">Back to Activities</a>
        <button class="btn btn-primary" id="solveButton">Solve Puzzle</button>
        <button class="btn btn-primary" id="mixButton">Mix Pieces</button>
    </div>

   <script>
    var rows = 3;
    var columns = 3;
    var imagePath = '{{ asset('images/') }}';
    var currTile, otherTile;
    var turns = 0;
    var imgOrder = ["final_puzzle_tile_4", "final_puzzle_tile_2", "final_puzzle_tile_8", "final_puzzle_tile_5", "final_puzzle_tile_1", "final_puzzle_tile_6", "final_puzzle_tile_7", "final_puzzle_tile_9", "final_puzzle_tile_3"];
    var tiles = []; // This will store references to the tile elements
    var timeLeft = 120; // 2 minutes in seconds
    var originalTime = timeLeft; // Store original time for calculating percentage

    window.onload = function() {
        initBoard();
        document.getElementById("back-to-activities").addEventListener("click", function(event) {
            var confirmLeave = confirm("Are you sure you want to quit the puzzle and go back to activities?");
            if (!confirmLeave) {
                event.preventDefault();
            }
        });
        document.getElementById("solveButton").addEventListener("click", solvePuzzle);
        document.getElementById("mixButton").addEventListener("click", mixPieces);
        updateTimer();
    };

    function initBoard() {
        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < columns; c++) {
                let tile = document.createElement("img");
                tile.id = r.toString() + "-" + c.toString();
                tile.src = imagePath + imgOrder[r * columns + c] + ".jpg";
                tile.addEventListener("dragstart", dragStart);
                tile.addEventListener("dragover", dragOver);
                tile.addEventListener("dragenter", dragEnter);
                tile.addEventListener("dragleave", dragLeave);
                tile.addEventListener("drop", dragDrop);
                tile.addEventListener("dragend", dragEnd);
                document.getElementById("board").append(tile);
                tiles.push(tile);
            }
        }
    }

    function mixPieces() {
        for (let i = tiles.length - 1; i > 0; i--) {
            let j = Math.floor(Math.random() * (i + 1));
            let temp = tiles[i].src;
            tiles[i].src = tiles[j].src;
            tiles[j].src = temp;
        }
    }

    function solvePuzzle() {
        imgOrder.sort();
        for (let i = 0; i < tiles.length; i++) {
            tiles[i].src = imagePath + imgOrder[i] + ".jpg";
        }
        alert("Oh, you pressed the button. Now you can't gain your score!");
    }

    function updateTimer() {
    let timer = setInterval(function() {
        if (timeLeft <= 0) {
            clearInterval(timer);
            alert('Time is up!');
            document.getElementById('progressBar').innerText = "100%"; // Ensure it shows 100% when time is up
            document.getElementById('progressBar').style.width = "100%";
            return;
        }
        timeLeft--;
        let minutes = Math.floor(timeLeft / 60);
        let seconds = timeLeft % 60;
        document.getElementById('time').innerText = minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
        let percentage = 100 - Math.floor((timeLeft / originalTime) * 100); // Correctly calculate percentage
        document.getElementById('progressBar').innerText = percentage + '%';
        document.getElementById('progressBar').style.width = percentage + '%';
    }, 1000);
}


    function dragStart() {
        currTile = this;
    }

    function dragOver(e) {
        e.preventDefault();
    }

    function dragEnter(e) {
        e.preventDefault();
    }

    function dragLeave() {
    }

    function dragDrop() {
        otherTile = this;
    }

    function dragEnd() {
        if (!otherTile.src.includes("final_puzzle_tile_3.jpg")) {
            return;
        }

        let currCoords = currTile.id.split("-");
        let r = parseInt(currCoords[0]);
        let c = parseInt(currCoords[1]);

        let otherCoords = otherTile.id.split("-");
        let r2 = parseInt(otherCoords[0]);
        let c2 = parseInt(otherCoords[1]);

        let moveLeft = r == r2 && c2 == c-1;
        let moveRight = r == r2 && c2 == c+1;
        let moveUp = c == c2 && r2 == r-1;
        let moveDown = c == c2 && r2 == r+1;
        let isAdjacent = moveLeft || moveRight || moveUp || moveDown;

        if (isAdjacent) {
            let currImg = currTile.src;
            let otherImg = otherTile.src;
            currTile.src = otherImg;
            otherTile.src = currImg;

            turns += 1;
            document.getElementById("turns").innerText = turns;
        }
    }
</script>

{% endblock %}
